#!/usr/bin/env ruby

require 'pdf/info'
require 'rtex'
require 'optparse'

options = {
  papersize: 'a4paper',
  nup: 4,
  extra: ''
}
OptionParser.new do |opts|
  opts.banner = 'Usage: imposition file1.pdf [file2.pdf ...]'

  opts.on '-p', '--papersize [papersize]', 'Final papersize (defaults to a4paper)' do |p|
    options[:papersize] = p
  end

  opts.on '-n', '--nup [pages]', 'Pages per fold (defaults to 4, values 2, 4, 8, 16)' do |n|
    options[:nup] = n.to_i
  end

  opts.on '-e', '--extra [options]', 'Extra options for pdfpages (ie. "landscape")' do |e|
    options[:extra] = ",#{e}"
  end
end.parse!

# Plantilla para pasarle a pdflatex
TEMPLATE = <<-EOT.gsub(/^\s+/, '')
  \\documentclass[@@papersize@@,10pt]{article}

  \\usepackage{pgfpages}
  \\usepackage{pdfpages}

  \\pgfpagesuselayout{@@nup@@ on 1}[@@papersize@@@@extra@@]

  \\begin{document}
    \\includepdf[pages={@@pages@@}]{@@document@@}
  \\end{document}
  EOT

# Redondear hacia arriba hasta el múltiplo más cercano
def round_to_nearest(int, near)
  (int + (near - 1)) / near * near
end

template = TEMPLATE.gsub('@@nup@@', options[:nup].to_s)
  .gsub('@@papersize@@', options[:papersize])
  .gsub('@@extra@@', options[:extra])

# Procesar todos los archivos
ARGV.each do |file|
  next unless /\.pdf\Z/ =~ file
  next unless pdf = PDF::Info.new(file)

  file = File.realpath(file)

  # Cantidad de páginas
  pages = pdf.metadata[:page_count]
  # Saber cuántas páginas extra tenemos que agregar
  rounded_pages = round_to_nearest(pages, 4)
  blank_pages = rounded_pages - pages

  # Ejemplo para 14 páginas:
  # [ {}, 1, 2, {}, 14, 3, 4, 13, 12, 5, 6, 11, 10, 7, 8, 9 ]
  #
  # * Agrego {} en la cantidad de páginas que falten
  #   [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, {}, {}]
  # * Agarro la primera mitad [ 1, 2, 3, 4, 5, 6, 7, 8 ]
  # * Invierto la segunda mitad [ {}, {}, 14, 13, 12, 11, 10, 9 ]
  # * Tomo dos elementos de la primera mitad y los intercalo de a pares en la segunda
  #   [ {}, 1, 2, {}, 14, 3, 4, 13, 12, 5, 6, 11, 10, 7, 8, 9 ]

  # Crea un array con todas las páginas en orden y le suma páginas en
  # blanco en la medida que faltan.
  padded = pages.times.map{|i|i+1} + Array.new(blank_pages, '{}')
  # Crear dos grupos de páginas por la mitad de la cantidad de páginas
  halved = padded.each_slice(rounded_pages / 2).to_a
  # A la segunda mitad se le agrega un nil para que al invertirla e
  # intercalarla en pares más tarde, empecemos por [nil,ultima_pagina]
  # en lugar de [ultima_pagina,anteultima_pagina]
  halved.last << nil
  # Invertir la segunda mitad e intercalar de a dos con la primera
  # mitad, eliminar los valores nulos y obtener un array plano
  order = halved.last.reverse.each_slice(2).zip(halved.first.each_slice(2).to_a).flatten.compact
  # Crear la distribución Nx1
  nup = order.each_slice(2).map{|i| ((options[:nup]/2)-1).times { i = i+i}; i}.flatten

  # Crear el PDF impuesto en base a la plantilla
  pdflatex = RTeX::Document.new(template.gsub('@@document@@', file).gsub('@@pages@@', nup * ','))
  pdflatex.to_pdf do |pdf_file|
    file_name = file.gsub(/\.pdf$/, '-imposition.pdf')
    puts "Creating #{file_name}..."
    FileUtils.cp pdf_file, file_name
  end
end
